using OpenTK.Graphics.OpenGL;

namespace ClashEngine.NET.Graphics.Resources.Internals
{
	/// <summary>
	/// Domyślna tekstura.
	/// Kwadrat 16px na 16px wypełniony kolorem #00FF00.
	/// </summary>
	internal class DefaultTexture
		: Texture
	{
		private static NLog.Logger Logger = NLog.LogManager.GetLogger("ClashEngine.NET");

		#region Singleton
		private static DefaultTexture _Instance;

		public static DefaultTexture Instance
		{
			get
			{
				if (_Instance == null)
				{
					_Instance = new DefaultTexture();
				}
				return _Instance;
			}
		}
		#endregion

		#region Private fields
		private static readonly uint[] TextureData = new uint[]
		{
			0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F,
			0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F,
			0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F,
			0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F,
			0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F,
			0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F,
			0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F,
			0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F,
			0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F,
			0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F,
			0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F,
			0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F,
			0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F,
			0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F,
			0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F,
			0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F, 0xFFFF007F,
		};

		private int TimesUsed = 0;
		#endregion

		#region Resource members
		/// <summary>
		/// Zawsze zwraca powodzenie.
		/// </summary>
		/// <returns></returns>
		public override Interfaces.ResourceLoadingState Load()
		{
			if (this.TimesUsed == 0)
			{
				Logger.Trace("Creating default texture...");
				this.TextureId = GL.GenTexture();
				this.Width = this.Height = 16;
				this.Bind();
				GL.TexImage2D<uint>(TextureTarget.Texture2D, 0, PixelInternalFormat.Rgba, 16, 16, 0, PixelFormat.Bgra, PixelType.UnsignedByte, TextureData);
				GL.TexParameter(TextureTarget.Texture2D, TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Linear);
				GL.TexParameter(TextureTarget.Texture2D, TextureParameterName.TextureMagFilter, (int)TextureMagFilter.Linear);

				Logger.Info("Default texture created with ID: {0}", this.TextureId);
			}
			++this.TimesUsed;
			return Interfaces.ResourceLoadingState.Success;
		}

		/// <summary>
		/// Jeśli to ostatnia instancja domyślnej tekstury - zwalnia ją.
		/// </summary>
		public override void Free()
		{
			--this.TimesUsed;
			if (this.TimesUsed <= 0)
			{
				base.Free();
				this.TimesUsed = 0;
			}
		}
		#endregion

		#region Constructors
		private DefaultTexture()
		{
			this.Id = this.FileName = "DefaultTexture";
		}
		#endregion
	}
}
